import { asyncResult } from '@vertex-protocol/utils';
import { DEFAULT_TOAST_TTL } from 'client/components/Toast/consts';
import { createToastId } from 'client/utils/createToastId';
import { getExecuteErrorMessage } from 'client/utils/errors/getExecuteErrorMessage';
import { isUserDeniedError } from 'client/utils/errors/isUserDeniedError';
import toast from 'react-hot-toast';
import { PlaceOrderErrorNotification } from '../components/orders/PlaceOrderErrorNotification';
import { PlaceOrderSuccessNotification } from '../components/orders/PlaceOrderSuccessNotification';
import { SignaturePendingNotification } from '../components/SignaturePendingNotification';
import {
  NotificationDispatchContext,
  PlaceOrderNotificationData,
} from '../types';

export async function handlePlaceOrderNotificationDispatch(
  placeOrderNotificationData: PlaceOrderNotificationData,
  context: NotificationDispatchContext,
) {
  const toastId = createToastId('placeOrder');

  if (!context.isSingleSignature) {
    toast.custom(
      (t) => {
        return (
          <SignaturePendingNotification
            action="place_order"
            visible={t.visible}
            onDismiss={() => {
              toast.dismiss(t.id);
            }}
          />
        );
      },
      { id: toastId, duration: Infinity },
    );
  }

  const verifyOrderActionResult = async (): Promise<string | undefined> => {
    const awaitedResult = await placeOrderNotificationData.executeResult;
    return awaitedResult.data.digest;
  };

  const [engineDigest, orderActionError] = await asyncResult(
    verifyOrderActionResult(),
  );
  toast.dismiss(toastId);

  if (!orderActionError) {
    // Same toast ID as the fill notification, otherwise default to autogenerated ID
    const successToastId = engineDigest ? `order-${engineDigest}` : toastId;
    toast.custom(
      (t) => {
        return (
          <PlaceOrderSuccessNotification
            visible={t.visible}
            ttl={DEFAULT_TOAST_TTL}
            orderData={placeOrderNotificationData}
            onDismiss={() => {
              toast.dismiss(t.id);
            }}
          />
        );
      },
      { id: successToastId, duration: DEFAULT_TOAST_TTL },
    );
  } else if (!isUserDeniedError(orderActionError)) {
    toast.custom(
      (t) => {
        return (
          <PlaceOrderErrorNotification
            orderData={placeOrderNotificationData}
            visible={t.visible}
            error={getExecuteErrorMessage(orderActionError)}
            ttl={DEFAULT_TOAST_TTL}
            onDismiss={() => {
              toast.dismiss(t.id);
            }}
          />
        );
      },
      { id: toastId, duration: DEFAULT_TOAST_TTL },
    );
  }
}
